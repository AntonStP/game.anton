mixin p-example__index(content, params)
  +p-example__page().p-example__index&attributes(attributes)
    :markdown-it(html plugins=['../../app/components/project/p-example/p-example-markdown-fix'])
      # Пример страницы и доступных компонентов
      > **Не забудьте удалить пример из финальной сборки!**

      * Менеджер пакетов <s>[`yarn`](https://yarnpkg.com/lang/en/)</s>
        [`npm`](https://www.npmjs.com/)
      * Сборка [`gulp`](https://gulpjs.com/)

      ### Компоненты
      * [модальные окна](#/modal)

      * [аккордеон](#/accordion)

      * [карусель](#/carousel)

      * [формы](#/forms)

      * custom-scroll
        ```pug
        +custom-scroll()(style="max-height:125px;")
          p(style='margin-top:0;') Текст 1
          p Текст 2
          p Текст 3
          p Текст 4
          p Текст 5
          p Текст 6
          p Текст 7
          p Текст 8
        ```

    div(style="background: #eeeeee; padding: 6px;")
      +custom-scroll()(style="max-height:125px;")
        p(style='margin-top:0;') Текст 1
        p Текст 2
        p Текст 3
        p Текст 4
        p Текст 5
        p Текст 6
        p Текст 7
        p Текст 8

    :markdown-it(html plugins=['../../app/components/project/p-example/p-example-markdown-fix'])
      * `framework/api` - классы работы с API
        * `api.js` - стандартные методы api
        * `api-directus` - api директуса

      * `project/custom-data` - хранение/получение/поиск данных

      * `framework/template-engine`
        ### Работа с шаблонами на клиентской стороне
        * require('framework/template-engine/template-engine') вернет Handlebars, который можно использовать как обычно
        * в `jQuery` добавляется функция `$.fn.templateEngine` - для заполнения шаблона данными

          ```pug
          //- pug
          +template-engine().block__element
            div \{{title}}, \{{body}}
          ```
          ```javascript
          // js
          $element.find('.block__element').templateEngine({title: 'Hello', body: 'world'}, params);
          ```

          этот код скомпиллирует контет `.block__element`, как Handlebars шаблон, в зависимости от params
          добавит результат в ту или иную часть DOM и вызовет .initPlugins для созданного элемента.

          В params могут быть указаны значения `append`, `prepend`, `before`, `after`. Каждое из них может быть функцией,
          тогда созданный элемент будет передан в нее до вызова .initPlugins.

          Так же, они могут быть DOM или jQuery объектом или css селектором. В этом случае будет вызвана соответствующая
          функция:

          Например для `{append: 'body'}` будет вызвана `$('body').append($content)`

          Если передать append: false элемент не будет добавлен в DOM.

          Если передать {append: true, toParent: true} элемент будет добавлен в родительский элемент шаблона

          Если параметры не передавать элемент будет добавлен непосредственно после шаблона



        ### Стандартные Handlebars хэлперы
        * `number` - разбитие числа на группы по 3 цифры.

          Если переданы 2 аргумента, первый - функция класса Math применяющаяся к числу

          Пример:

          ```html
          \{{number 'ceil' 578000.341}} -> {{number 'ceil' 578000.341}}

          \{{number 'floor' 578000.587}} -> {{number 'floor' 578000.587}}

          \{{number 1000.999}} -> {{number 1000.999}}
          ```

        * `get-end` Handlebars обертка для `framework/utils/get-end`

          Склонение слов по числу

          ```html
          \{{count}} работ\{{get-end count 'а' 'ы' ''}}
          ```

          В зависимости от значения count выведет:
          * `0` работ{{get-end 0 'а' 'ы' ''}}
          * `1` работ{{get-end 1 'а' 'ы' ''}}
          * `2` работ{{get-end 2 'а' 'ы' ''}}
          * `5` работ{{get-end 5 'а' 'ы' ''}}
          * `21` работ{{get-end 21 'а' 'ы' ''}}
          * ...

        * `percentage` - перевод дроби в проценты
          ```html
          \{{percentage 0.37}} -> {{percentage 0.37}}
          ```

        * `to-fixed` - вывод числа с ведущими нулями
          ```html
          \{{to-fixed 50 4}} -> {{to-fixed 50 4}}
          ```

        * `typograf` - если в зависимости добавлен [`typograf`](https://www.npmjs.com/package/typograf) - типографирует текст

          Параметры Типографа надо вручную настраивать в файле template-engine.js
          ```html
          \{{typograf 'Типографируемая строка'}}
          ```

        * `json` - вывод объекта в JSON формате (в основном используется для дебага)

        * `p` - переводит многострочный текст в параграфы
          ```html
          \{{#p}}Hello,
          world
          \{{/p}}

          Выведет:
          <p>Hello,</p>
          <p>world</p>
          ```



      * `framework/pug-list` - вывод списка однотипных элементов

      * `project/utils` - разные утилиты
        * `browser` - информация о браузере
        * `get-end` - склонение по числам (1 работА, 2 работЫ, 5 работ и т.п.)
        * `is-desktop` - синхронное с css определение лэйаута
        * `location` - обертка для работы с window.location и History api браузера
        * `prevent-overscroll` - библиотека для предотвращения скролла страницы под модальным окном в safari
        * `scroll-top` - работа с нативным скроллом
        * `swipe` - события pep:swipe и pep:touchmove с дополнительными параметрами (длина смещения, время от начала движения, определение направления свайпа с заданием углов)

      * `framework/page/og` - добавление open graph и других мета тэгов используемых соц.сетями для шаринга.

        * ### og
          Данные для og указываются в `copyright.json`. Если в `og.title`, `og.description`, `og.image` указан объект, то
          будет установлен og.title.default, если строка, то будет установлена она
          * og:title - og.title
          * og:description - og.description
          * og:image - og.image

        * ### vk
          Заголовок и описание берется из og:title и og:description, если для fb и vk нужны разные тексты, то надо шарить
          страницу с GET параметром, а в og.title надо указывать php строку.

          Например, шарим страницу http://site.ru/?vk, а в og.title указываем:
          ```php
          <? if (isSet($_GET['vk'])):?>Заголовок для vk<? endif: ?>Заголовок для fb<? endif; ?>
          ```

        * ### twitter
          Заголовок - og.title.tw, если не указан будет подставлен из og:title

          Текст - og.description.tw, если не указан будет подставлен из og:description

          Картинка - og.image.tw

        * ### Одноклассники
          Все данные берутся из og, для текстов отличных от fb используем php

      * `framework/share` - кнопки шаринга в соц.сети (сейчас есть вконтакте (vk), facebook (fb), одноклассники (ok), twitter (tw))
        ```pug
        +share({soc: 'vk'}).block__share.block__share_vk
          .block__icon.block__icon_vk
        ```

      * oAuth - авторизация через соц.сети и т.п.

      * `framework/subpage` - single page application

      * validator - валидатор данных перед отправкой на сервер

      * user - точка получения данных об авторизованном пользователе
